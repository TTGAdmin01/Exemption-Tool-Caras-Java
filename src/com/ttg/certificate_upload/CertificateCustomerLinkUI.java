/*
 * CertificateCustomerLinkUI.java
 *
 * Description:  This class displays the GUI for the CertCapture Certificate/Customer link process
 *   using Java swing classes.
 *
 * @author Cara Brauner
 * Copyright: Tax Technology Group, 2022
 *
 * $Log: CertificateCustomerLinkUI.java,v $
 * Revision 1.1  2022/05/09 23:54:29  carab
 * Add program to link existing customers with certificates
 *
 *
 */
package com.ttg.certificate_upload;

import com.ttg.certificate_upload.beans.CertCaptureCompanyBean;
import com.ttg.certificate_upload.utils.StringUtils;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Properties;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import java.util.concurrent.ExecutionException;

import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.core.config.Configurator;


public class CertificateCustomerLinkUI extends javax.swing.JFrame {
    private Logger log = LogManager.getLogger(getClass());
    
    private File excelFile = null;
    private String excelFileName = null;
    private Properties properties = null;
    private String targetEnvironment = "sandbox";
    private String company = "";

    private HashMap<String, CertCaptureCompanyBean> companies = new HashMap();

    private String[] uiCompanies = null;
    /*{"-Select One-",
        "Atlanta Electrical Distributors, LLC",
        "Calvert Wire and Cable Corporation",
        "Carlton-Bates Company",
        "Communications Supply Corporation",
        "Conney Safety Products LLC",
        "Hi-Line Utility Supply Company, LLC",
        "Hill Country Electric Supply, L.P.",
        "Liberty Wire and Cable, Inc.",
        "Needham Electric Supply, LLC",
        "Stone Eagle Electrical Supply LP",
        "TVC Communications LLC",
        "WDI USVI LLC",
        "WESCO Distribution, Inc.",
        "WESCO Integrated Supply, Inc.",
        "WESCO International, Inc.",
        "WESCO Nevada, Ltd",
        "WESCO Services LLC (dba \"WESCO Lighting Solutions\")"
    };
            */
    
    
    
    // From properties
    private String certCaptureProductionUrl = null;
    private String certCaptureProductionUsername = null;
    private String certCaptureProductionPassword = null;
    
    private String certCaptureSandboxUrl = null;
    private String certCaptureSandboxUsername = null;
    private String certCaptureSandboxPassword = null;
    
    private String logLevel = "DEBUG";

    /**
     * Creates new form CertificateUploadUI
     */
    public CertificateCustomerLinkUI() {

        companies = new HashMap();

        // Read properties.  On error abort.
        StringBuffer messages = new StringBuffer();
        messages.append("Reading and Validating Properties file...");
        String propertiesMessage = readAndValidateProperties();
        if (!StringUtils.isEmpty(propertiesMessage)) {
            messages.append("An error occurred\n");
            messages.append(propertiesMessage);
            messages.append("All Done.");
        } else {
            messages.append("Done\n");
        }
        
        // Initialize companyBean hashmap
        initComponents();
        
        // Set progress text area
        progressTextArea.append(messages.toString());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        excelFileLabel = new javax.swing.JLabel();
        browseExcelButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        sandboxRadioButton = new javax.swing.JRadioButton();
        productionRadioButton = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        startImportButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        companyComboBox = new JComboBox(uiCompanies);
        jScrollPane1 = new javax.swing.JScrollPane();
        progressTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Certificate Customer Link");
        setLocation(new java.awt.Point(0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setName(""); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Certificate Excel File");

        browseExcelButton.setText("Browse...");
        browseExcelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseExcelButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Target Environment");

        buttonGroup1.add(sandboxRadioButton);
        sandboxRadioButton.setSelected(true);
        sandboxRadioButton.setText("Sandbox");
        sandboxRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sandboxRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(productionRadioButton);
        productionRadioButton.setText("Production");
        productionRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productionRadioButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Target Company");

        startImportButton.setText("Start Update");
        startImportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startImportButtonActionPerformed(evt);
            }
        });

        companyComboBox.setName("companyComboBox"); // NOI18N
        companyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                companyComboBoxActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBar(null);

        progressTextArea.setColumns(20);
        progressTextArea.setRows(5);
        jScrollPane1.setViewportView(progressTextArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                            .addComponent(startImportButton, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(excelFileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(browseExcelButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(companyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(sandboxRadioButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(productionRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 177, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(excelFileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(browseExcelButton))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sandboxRadioButton)
                    .addComponent(productionRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(companyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startImportButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );

        setSize(new java.awt.Dimension(784, 690));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Use a swing worker to read the spreadsheet and handle interactions with
     * CertCapture in the background while displaying updates in the foreground.
     */
    private void processExcelSpreadsheet(final File excelFile) throws Exception {
                // define a SwingWorker to run in background  
        SwingWorker<Integer, String> worker = new  CustomerCertLinkExcelFileSwingWorker(excelFile, company, companies, targetEnvironment, properties, progressTextArea);
        
        // execute the background thread 
        worker.execute();
        
        try {
            int length = worker.get();
            
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            throw ex;
        }   
        
        // We don't care about the results!
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void companyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_companyComboBoxActionPerformed

        if (companyComboBox.getSelectedIndex() > 0) {
            this.company = (String) companyComboBox.getSelectedItem();
        }
    }//GEN-LAST:event_companyComboBoxActionPerformed

    private void startImportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startImportButtonActionPerformed

        // Clear the progress field
        progressTextArea.setText("");
        progressTextArea.append("Starting Update\n");

        // Read properties.  On error abort.
        progressTextArea.append("Reading and Validating Properties file...");
        String propertiesMessage = readAndValidateProperties();
        if (!StringUtils.isEmpty(propertiesMessage)) {
            progressTextArea.append("An error occurred\n");
            progressTextArea.append(propertiesMessage);
            progressTextArea.append("All Done.");
            progressTextArea.setCaretPosition(progressTextArea.getText().length() - 1);
        } else {
            progressTextArea.append("Done\n");
        }

        // Set log level here

        progressTextArea.append("Validating input...");

        String errorMessage = "";
        // Validate Excel File
        if (this.excelFile == null) {
            errorMessage += (errorMessage.length() > 0 ? "\n" : "") + "Please select a Certificate Excel file.";
        } else {
            if (!excelFileName.endsWith(".xlsx")) {
                errorMessage += (errorMessage.length() > 0 ? "\n" : "") + "Please select an Certificate Excel file with name ending in .xlsx";
            }
        }

        // Validate target environment
        if (StringUtils.isEmpty(this.targetEnvironment)) {
            errorMessage += (errorMessage.length() > 0 ? "\n" : "") + "Please select a Target Environment.";
        }

        // Validate target company
        if (companyComboBox.getSelectedIndex() <= 0) {
            errorMessage += (errorMessage.length() > 0 ? "\n" : "") + "Please select a Target Company.";
        }

        // Show message if errors exist
        if (!StringUtils.isEmpty(errorMessage)) {
            JOptionPane.showMessageDialog(this, errorMessage, "Input Errors", JOptionPane.ERROR_MESSAGE);
            progressTextArea.append("Found Errors\n");
            progressTextArea.setCaretPosition(progressTextArea.getText().length() - 1);
            return;
        }

        // Done with validation
        progressTextArea.append("Done.\n");
        progressTextArea.setCaretPosition(progressTextArea.getText().length() - 1);

        // Read Excel Spreadsheet
        try {
            progressTextArea.append("===========================================\n");
            progressTextArea.append("Reading Excel file: " + excelFileName + "\n");
            progressTextArea.setCaretPosition(progressTextArea.getText().length() - 1);

            processExcelSpreadsheet(excelFile);

        } catch (Exception e) {
            // Already caught.  Print the stack trace
            progressTextArea.append(e.getClass().getName() + " occurred.\n");
            progressTextArea.append("Message: " + e.getMessage() + "\n");
            progressTextArea.append("Action: Contact Support \n");

            StringWriter swriter = new StringWriter();
            PrintWriter pwriter = new PrintWriter(swriter);
            e.printStackTrace(pwriter);

            progressTextArea.append("Stack Trace: ");
            progressTextArea.append(swriter.toString());
            progressTextArea.append("\n");
            progressTextArea.setCaretPosition(progressTextArea.getText().length() - 1);

            log.error(e.getClass().getName() + ": " + e.getMessage(), e);

        }
    }//GEN-LAST:event_startImportButtonActionPerformed

    private void productionRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productionRadioButtonActionPerformed
        this.targetEnvironment = "production";
    }//GEN-LAST:event_productionRadioButtonActionPerformed

    private void sandboxRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sandboxRadioButtonActionPerformed
        this.targetEnvironment = "sandbox";
    }//GEN-LAST:event_sandboxRadioButtonActionPerformed

    private void browseExcelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseExcelButtonActionPerformed
        JFileChooser fc = new JFileChooser();

        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int returnVal = fc.showOpenDialog(CertificateCustomerLinkUI.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            this.excelFile = file;
            this.excelFileLabel.setText(file.getName());
            this.excelFileName = file.getName();

        }
    }//GEN-LAST:event_browseExcelButtonActionPerformed

    /**
     * Read and validate the properties file.
     * @return errorMessage
     */
    private String readAndValidateProperties() {
        
        String errorMessage = "";
        ArrayList<String> companiesToSort = new ArrayList();
        
        properties = new Properties();
        try {
            properties.load(new FileInputStream("TTGCertificateUpload.properties"));
        } catch (FileNotFoundException ex) {
            errorMessage += "FileNotFoundException reading TTGCertificateUpload.properties, " + ex.getMessage() + "\n";
            errorMessage += ExceptionUtils.getStackTrace(ex);
            return errorMessage;
        } catch (IOException e) {
            errorMessage += "IOException reading TTGCertificateUpload.properties, " + e.getMessage() + "\n";
            errorMessage += ExceptionUtils.getStackTrace(e);
            return errorMessage;
        }
        
         
        // Check the following properties
        this.certCaptureProductionUrl = properties.getProperty("CERTCAPTURE_PRODUCTION_URL");
        this.certCaptureProductionUsername = properties.getProperty("CERTCAPTURE_PRODUCTION_USERNAME");
        this.certCaptureProductionPassword = properties.getProperty("CERTCAPTURE_PRODUCTION_PASSWORD");
        this.certCaptureSandboxUrl = properties.getProperty("CERTCAPTURE_SANDBOX_URL");
        this.certCaptureSandboxUsername = properties.getProperty("CERTCAPTURE_SANDBOX_USERNAME");
        this.certCaptureSandboxPassword = properties.getProperty("CERTCAPTURE_SANDBOX_PASSWORD");
        this.logLevel = properties.getProperty("LOG_LEVEL");
        
        // If no log level, default to INFO
        if (StringUtils.isEmpty(logLevel)) {
            logLevel = "INFO";
        }
        
        // Set the log level at the root level
        Configurator.setAllLevels(LogManager.getRootLogger().getName(), Level.toLevel(logLevel));
        log.info("Log level set to " + logLevel);
        
        
        if (StringUtils.isEmpty(certCaptureProductionUrl)) {
            errorMessage += "CERTCAPTURE_PRODUCTION_URL is missing from TTGCertificateUpload.properties file\n";
        }
        if (StringUtils.isEmpty(certCaptureProductionUsername)) {
            errorMessage += "CERTCAPTURE_PRODUCTION_USERNAME is missing from TTGCertificateUpload.properties file\n";
        }
        if (StringUtils.isEmpty(certCaptureProductionPassword)) {
            errorMessage += "CERTCAPTURE_PRODUCTION_PASSWORD is missing from TTGCertificateUpload.properties file\n";
        }
        if (StringUtils.isEmpty(certCaptureSandboxUrl)) {
            errorMessage += "CERTCAPTURE_SANDBOX_URL is missing from TTGCertificateUpload.properties file\n";
        }
        if (StringUtils.isEmpty(certCaptureSandboxUsername)) {
            errorMessage += "CERTCAPTURE_SANDBOX_USERNAME is missing from TTGCertificateUpload.properties file\n";
        }
        if (StringUtils.isEmpty(certCaptureSandboxPassword)) {
            errorMessage += "CERTCAPTURE_SANDBOX_PASSWORD is missing from TTGCertificateUpload.properties file\n";
        }
        
        // Get company information
        for (Enumeration e = properties.keys(); e.hasMoreElements(); ) {
            String key = (String)e.nextElement();
            if (key.startsWith("COMPANY_NAME")) {
                String companyName = properties.getProperty(key);
                
                String companyNum = key.substring("COMPANY_NAME".length());
                String sandboxClientId = properties.getProperty("COMPANY_SBX_ID" + companyNum);
                String productionClientId = properties.getProperty("COMPANY_PROD_ID" + companyNum);

                log.info("Found company: " + companyName + " sandboxClientId=" + sandboxClientId + " productionClientId=" + productionClientId);
                companies.put(companyName, new CertCaptureCompanyBean(companyName, sandboxClientId, productionClientId));
                companiesToSort.add(companyName);
            }
            
        }
        
        // Create company select list
        if (companiesToSort.size() > 0) {
            Collections.sort(companiesToSort);
            
            uiCompanies = new String[companiesToSort.size() + 1];
            uiCompanies[0] = "-Select One-";
            for (int i = 0; i < companiesToSort.size(); i++) {
                uiCompanies[i+1] = companiesToSort.get(i);
            }
        } else {
            uiCompanies = new String[1];
            uiCompanies[0] = "-Select One-";

            log.error("No CertCapture Companies were set up in the properties file");
            errorMessage += "No CertCapture Companies were set up in the properties file TTGCertificateUpload.properties.\n";
        }
        return errorMessage;

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CertificateCustomerLinkUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CertificateCustomerLinkUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CertificateCustomerLinkUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CertificateCustomerLinkUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CertificateCustomerLinkUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseExcelButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> companyComboBox;
    private javax.swing.JLabel excelFileLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton productionRadioButton;
    private javax.swing.JTextArea progressTextArea;
    private javax.swing.JRadioButton sandboxRadioButton;
    private javax.swing.JButton startImportButton;
    // End of variables declaration//GEN-END:variables
}
